{"language":"Solidity","sources":{"src/SimpleBudgetWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title SimpleBudgetWallet\n * @dev A simple budget wallet with spending buckets and monthly limits\n * @notice Users can create spending buckets, set monthly limits, and spend within those limits\n */\ncontract SimpleBudgetWallet is AccessControl, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n    \n    // Roles\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant SPENDER_ROLE = keccak256(\"SPENDER_ROLE\");\n    \n    // Events\n    event BucketCreated(address indexed user, string bucketName, uint256 monthlyLimit);\n    event BucketUpdated(address indexed user, string bucketName, uint256 newLimit, bool active);\n    event BucketFunded(address indexed user, string bucketName, uint256 amount, address token);\n    event SpentFromBucket(address indexed user, string bucketName, uint256 amount, address recipient, address token);\n    event BucketTransfer(address indexed user, string fromBucket, string toBucket, uint256 amount, address token);\n    event FundsDeposited(address indexed user, uint256 amount, address token);\n    event MonthlyLimitReset(address indexed user, string bucketName);\n    event DelegateAdded(address indexed user, address indexed delegate, string bucketName);\n    event DelegateRemoved(address indexed user, address indexed delegate, string bucketName);\n    event UnallocatedWithdraw(address indexed user, address token, uint256 amount, address recipient);\n    event EmergencyWithdraw(address indexed user, address token, uint256 amount);\n    \n    // Structs\n    struct Bucket {\n        uint256 balance;              // Current ETH balance in bucket\n        uint256 monthlySpent;         // Amount spent this month\n        uint256 monthlyLimit;         // Monthly spending limit (0 = no limit)\n        uint256 lastResetTimestamp;   // When monthly counter was last reset\n        bool exists;                  // Whether bucket exists\n        bool active;                  // Whether bucket is active for spending\n        mapping(address => uint256) tokenBalances;  // token => balance\n        mapping(address => bool) delegates;         // delegates who can spend\n    }\n    \n    struct TokenBalance {\n        mapping(string => uint256) bucketBalances;  // bucketName => balance\n        uint256 unallocated;                        // Unallocated balance\n    }\n    \n    // State variables\n    mapping(address => mapping(string => Bucket)) public userBuckets;  // user => bucketName => Bucket\n    mapping(address => string[]) public userBucketNames;               // user => bucketNames[]\n    mapping(address => mapping(address => TokenBalance)) public userTokenBalances; // user => token => TokenBalance\n    \n    // Constants\n    uint256 public constant MONTH_SECONDS = 30 days;\n    address public constant ETH_ADDRESS = address(0);\n    \n    // Modifiers\n    modifier onlyUserOrDelegate(address user, string memory bucketName) {\n        require(\n            msg.sender == user || \n            userBuckets[user][bucketName].delegates[msg.sender] || \n            hasRole(ADMIN_ROLE, msg.sender),\n            \"Not authorized\"\n        );\n        _;\n    }\n    \n    modifier bucketExists(address user, string memory bucketName) {\n        require(userBuckets[user][bucketName].exists, \"Bucket does not exist\");\n        _;\n    }\n    \n    modifier bucketActive(address user, string memory bucketName) {\n        require(userBuckets[user][bucketName].active, \"Bucket is inactive\");\n        _;\n    }\n    \n    modifier hasSufficientBalance(address user, address token, string memory bucketName, uint256 amount) {\n        uint256 balance = getBucketBalance(user, token, bucketName);\n        require(balance >= amount, \"Insufficient bucket balance\");\n        _;\n    }\n    \n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n    }\n    \n    // ============ DEPOSIT FUNCTIONS ============\n    \n    /**\n     * @dev Deposit ETH to unallocated balance\n     */\n    function depositETH() external payable whenNotPaused {\n        require(msg.value > 0, \"Must deposit more than 0\");\n        userTokenBalances[msg.sender][ETH_ADDRESS].unallocated = \n            userTokenBalances[msg.sender][ETH_ADDRESS].unallocated + msg.value;\n        emit FundsDeposited(msg.sender, msg.value, ETH_ADDRESS);\n    }\n    \n    /**\n     * @dev Deposit ERC20 tokens to unallocated balance\n     */\n    function depositToken(address token, uint256 amount) external whenNotPaused {\n        require(token != ETH_ADDRESS, \"Use depositETH for ETH\");\n        require(amount > 0, \"Must deposit more than 0\");\n        \n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        userTokenBalances[msg.sender][token].unallocated = \n            userTokenBalances[msg.sender][token].unallocated + amount;\n        emit FundsDeposited(msg.sender, amount, token);\n    }\n    \n    /**\n     * @dev Withdraw unallocated funds back to user's wallet\n     */\n    function withdrawUnallocated(\n        address token,\n        uint256 amount,\n        address payable recipient\n    ) external nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(recipient != address(0), \"Invalid recipient\");\n        require(userTokenBalances[msg.sender][token].unallocated >= amount, \n            \"Insufficient unallocated balance\");\n        \n        userTokenBalances[msg.sender][token].unallocated = \n            userTokenBalances[msg.sender][token].unallocated - amount;\n        \n        if (token == ETH_ADDRESS) {\n            (bool success, ) = recipient.call{value: amount}(\"\");\n            require(success, \"ETH transfer failed\");\n        } else {\n            IERC20(token).safeTransfer(recipient, amount);\n        }\n        \n        emit UnallocatedWithdraw(msg.sender, token, amount, recipient);\n    }\n    \n    // ============ BUCKET MANAGEMENT ============\n    \n    /**\n     * @dev Create a new spending bucket\n     */\n    function createBucket(\n        string memory bucketName, \n        uint256 monthlyLimit\n    ) external whenNotPaused {\n        require(!userBuckets[msg.sender][bucketName].exists, \"Bucket already exists\");\n        require(bytes(bucketName).length > 0, \"Bucket name cannot be empty\");\n        require(bytes(bucketName).length <= 32, \"Bucket name too long\");\n        \n        Bucket storage newBucket = userBuckets[msg.sender][bucketName];\n        newBucket.monthlyLimit = monthlyLimit;\n        newBucket.lastResetTimestamp = block.timestamp;\n        newBucket.exists = true;\n        newBucket.active = true;\n        \n        userBucketNames[msg.sender].push(bucketName);\n        emit BucketCreated(msg.sender, bucketName, monthlyLimit);\n    }\n    \n    /**\n     * @dev Update bucket settings\n     */\n    function updateBucket(\n        string memory bucketName,\n        uint256 newMonthlyLimit,\n        bool active\n    ) external bucketExists(msg.sender, bucketName) {\n        Bucket storage bucket = userBuckets[msg.sender][bucketName];\n        bucket.monthlyLimit = newMonthlyLimit;\n        bucket.active = active;\n        emit BucketUpdated(msg.sender, bucketName, newMonthlyLimit, active);\n    }\n    \n    /**\n     * @dev Fund a bucket with ETH or tokens from unallocated balance\n     */\n    function fundBucket(\n        string memory bucketName, \n        uint256 amount,\n        address token\n    ) external bucketExists(msg.sender, bucketName) whenNotPaused {\n        require(amount > 0, \"Amount must be greater than 0\");\n        \n        if (token == ETH_ADDRESS) {\n            require(userTokenBalances[msg.sender][ETH_ADDRESS].unallocated >= amount, \n                \"Insufficient unallocated ETH\");\n            userTokenBalances[msg.sender][ETH_ADDRESS].unallocated = \n                userTokenBalances[msg.sender][ETH_ADDRESS].unallocated - amount;\n            userBuckets[msg.sender][bucketName].balance = \n                userBuckets[msg.sender][bucketName].balance + amount;\n        } else {\n            require(userTokenBalances[msg.sender][token].unallocated >= amount, \n                \"Insufficient unallocated tokens\");\n            userTokenBalances[msg.sender][token].unallocated = \n                userTokenBalances[msg.sender][token].unallocated - amount;\n            userTokenBalances[msg.sender][token].bucketBalances[bucketName] = \n                userTokenBalances[msg.sender][token].bucketBalances[bucketName] + amount;\n        }\n        \n        emit BucketFunded(msg.sender, bucketName, amount, token);\n    }\n    \n    /**\n     * @dev Transfer funds between buckets\n     */\n    function transferBetweenBuckets(\n        string memory fromBucket,\n        string memory toBucket,\n        uint256 amount,\n        address token\n    )\n        external\n        bucketExists(msg.sender, fromBucket)\n        bucketExists(msg.sender, toBucket)\n        hasSufficientBalance(msg.sender, token, fromBucket, amount)\n        whenNotPaused\n    {\n        require(amount > 0, \"Amount must be greater than 0\");\n        \n        if (token == ETH_ADDRESS) {\n            userBuckets[msg.sender][fromBucket].balance = \n                userBuckets[msg.sender][fromBucket].balance - amount;\n            userBuckets[msg.sender][toBucket].balance = \n                userBuckets[msg.sender][toBucket].balance + amount;\n        } else {\n            userTokenBalances[msg.sender][token].bucketBalances[fromBucket] = \n                userTokenBalances[msg.sender][token].bucketBalances[fromBucket] - amount;\n            userTokenBalances[msg.sender][token].bucketBalances[toBucket] = \n                userTokenBalances[msg.sender][token].bucketBalances[toBucket] + amount;\n        }\n        \n        emit BucketTransfer(msg.sender, fromBucket, toBucket, amount, token);\n    }\n    \n    // ============ SPENDING FUNCTIONS ============\n    \n    /**\n     * @dev Internal function to spend from a specific bucket\n     */\n    function _spendFromBucket(\n        address user,\n        string memory bucketName, \n        uint256 amount, \n        address payable recipient,\n        address token,\n        bytes memory data\n    ) \n        internal\n        bucketExists(user, bucketName)\n        bucketActive(user, bucketName)\n        hasSufficientBalance(user, token, bucketName, amount)\n    {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(recipient != address(0), \"Invalid recipient\");\n        \n        Bucket storage bucket = userBuckets[user][bucketName];\n        \n        // Reset monthly spending if needed\n        if (block.timestamp >= bucket.lastResetTimestamp + MONTH_SECONDS) {\n            bucket.monthlySpent = 0;\n            bucket.lastResetTimestamp = block.timestamp;\n            emit MonthlyLimitReset(user, bucketName);\n        }\n        \n        // Check monthly limit\n        if (bucket.monthlyLimit > 0) {\n            require(bucket.monthlySpent + amount <= bucket.monthlyLimit, \n                \"Monthly limit exceeded\");\n        }\n        \n        // Update balances and monthly spending\n        bucket.monthlySpent = bucket.monthlySpent + amount;\n        \n        if (token == ETH_ADDRESS) {\n            bucket.balance = bucket.balance - amount;\n            (bool success, ) = recipient.call{value: amount}(data);\n            require(success, \"ETH transfer failed\");\n        } else {\n            userTokenBalances[user][token].bucketBalances[bucketName] = \n                userTokenBalances[user][token].bucketBalances[bucketName] - amount;\n            IERC20(token).safeTransfer(recipient, amount);\n            if (data.length > 0) {\n                (bool success, ) = recipient.call(data);\n                require(success, \"Call failed\");\n            }\n        }\n        \n        emit SpentFromBucket(user, bucketName, amount, recipient, token);\n    }\n    \n    /**\n     * @dev Spend from a specific bucket\n     */\n    function spendFromBucket(\n        address user,\n        string memory bucketName, \n        uint256 amount, \n        address payable recipient,\n        address token,\n        bytes calldata data\n    ) \n        external \n        nonReentrant\n        whenNotPaused\n        onlyUserOrDelegate(user, bucketName)\n    {\n        _spendFromBucket(user, bucketName, amount, recipient, token, data);\n    }\n    \n    /**\n     * @dev Batch spend from multiple buckets\n     */\n    function batchSpend(\n        address user,\n        string[] memory bucketNames,\n        uint256[] memory amounts,\n        address[] memory recipients,\n        address[] memory tokens,\n        bytes[] memory datas\n    ) external nonReentrant whenNotPaused {\n        require(bucketNames.length == amounts.length, \"Array length mismatch\");\n        require(bucketNames.length == recipients.length, \"Array length mismatch\");\n        require(bucketNames.length == tokens.length, \"Array length mismatch\");\n        require(bucketNames.length == datas.length, \"Array length mismatch\");\n        \n        for (uint256 i = 0; i < bucketNames.length; i++) {\n            require(\n                msg.sender == user || \n                userBuckets[user][bucketNames[i]].delegates[msg.sender] || \n                hasRole(ADMIN_ROLE, msg.sender),\n                \"Not authorized\"\n            );\n            _spendFromBucket(\n                user,\n                bucketNames[i],\n                amounts[i],\n                payable(recipients[i]),\n                tokens[i],\n                datas[i]\n            );\n        }\n    }\n    \n    // ============ DELEGATE MANAGEMENT ============\n    \n    /**\n     * @dev Add a delegate who can spend from a specific bucket\n     */\n    function addDelegate(\n        string memory bucketName, \n        address delegate\n    ) external bucketExists(msg.sender, bucketName) {\n        require(delegate != address(0), \"Invalid delegate address\");\n        require(delegate != msg.sender, \"Cannot delegate to self\");\n        \n        userBuckets[msg.sender][bucketName].delegates[delegate] = true;\n        emit DelegateAdded(msg.sender, delegate, bucketName);\n    }\n    \n    /**\n     * @dev Remove a delegate\n     */\n    function removeDelegate(\n        string memory bucketName, \n        address delegate\n    ) external bucketExists(msg.sender, bucketName) {\n        userBuckets[msg.sender][bucketName].delegates[delegate] = false;\n        emit DelegateRemoved(msg.sender, delegate, bucketName);\n    }\n    \n    // ============ EMERGENCY FUNCTIONS ============\n    \n    /**\n     * @dev Emergency pause all operations\n     */\n    function pause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n    \n    /**\n     * @dev Unpause all operations\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n    \n    /**\n     * @dev Emergency withdraw all funds (when paused)\n     */\n    function emergencyWithdraw(address user, address token) \n        external \n        onlyRole(ADMIN_ROLE) \n        whenPaused\n        nonReentrant \n    {\n        if (token == ETH_ADDRESS) {\n            uint256 totalBalance = userTokenBalances[user][ETH_ADDRESS].unallocated;\n            // Add all bucket balances\n            string[] memory buckets = userBucketNames[user];\n            for (uint256 i = 0; i < buckets.length; i++) {\n                totalBalance = totalBalance + userBuckets[user][buckets[i]].balance;\n                userBuckets[user][buckets[i]].balance = 0;\n            }\n            userTokenBalances[user][ETH_ADDRESS].unallocated = 0;\n            \n            if (totalBalance > 0) {\n                payable(user).transfer(totalBalance);\n                emit EmergencyWithdraw(user, token, totalBalance);\n            }\n        } else {\n            uint256 totalBalance = userTokenBalances[user][token].unallocated;\n            string[] memory buckets = userBucketNames[user];\n            for (uint256 i = 0; i < buckets.length; i++) {\n                uint256 bucketBalance = userTokenBalances[user][token].bucketBalances[buckets[i]];\n                totalBalance = totalBalance + bucketBalance;\n                userTokenBalances[user][token].bucketBalances[buckets[i]] = 0;\n            }\n            userTokenBalances[user][token].unallocated = 0;\n            \n            if (totalBalance > 0) {\n                IERC20(token).safeTransfer(user, totalBalance);\n                emit EmergencyWithdraw(user, token, totalBalance);\n            }\n        }\n    }\n    \n    // ============ VIEW FUNCTIONS ============\n    \n    /**\n     * @dev Get bucket information\n     */\n    function getBucket(address user, string memory bucketName) \n        external \n        view \n        returns (\n            uint256 ethBalance,\n            uint256 monthlySpent,\n            uint256 monthlyLimit,\n            uint256 timeUntilReset,\n            bool active\n        ) \n    {\n        require(userBuckets[user][bucketName].exists, \"Bucket does not exist\");\n        \n        Bucket storage bucket = userBuckets[user][bucketName];\n        uint256 resetTime = bucket.lastResetTimestamp + MONTH_SECONDS > block.timestamp ?\n            bucket.lastResetTimestamp + MONTH_SECONDS - block.timestamp : 0;\n            \n        return (\n            bucket.balance,\n            bucket.monthlySpent,\n            bucket.monthlyLimit,\n            resetTime,\n            bucket.active\n        );\n    }\n    \n    /**\n     * @dev Get bucket balance for a specific token\n     */\n    function getBucketBalance(address user, address token, string memory bucketName) \n        public \n        view \n        returns (uint256) \n    {\n        if (!userBuckets[user][bucketName].exists) return 0;\n        \n        if (token == ETH_ADDRESS) {\n            return userBuckets[user][bucketName].balance;\n        }\n        return userTokenBalances[user][token].bucketBalances[bucketName];\n    }\n    \n    /**\n     * @dev Get unallocated balance for a token\n     */\n    function getUnallocatedBalance(address user, address token) \n        external \n        view \n        returns (uint256) \n    {\n        return userTokenBalances[user][token].unallocated;\n    }\n    \n    /**\n     * @dev Get all bucket names for a user\n     */\n    function getUserBuckets(address user) external view returns (string[] memory) {\n        return userBucketNames[user];\n    }\n    \n    /**\n     * @dev Check if an address is a delegate for a bucket\n     */\n    function isDelegate(address user, string memory bucketName, address delegate) \n        external \n        view \n        returns (bool) \n    {\n        return userBuckets[user][bucketName].delegates[delegate];\n    }\n    \n    /**\n     * @dev Get user's total balance across all buckets and unallocated\n     */\n    function getTotalBalance(address user, address token) \n        external \n        view \n        returns (uint256 total) \n    {\n        total = userTokenBalances[user][token].unallocated;\n        \n        string[] memory buckets = userBucketNames[user];\n        for (uint256 i = 0; i < buckets.length; i++) {\n            total = total + getBucketBalance(user, token, buckets[i]);\n        }\n        \n        return total;\n    }\n    \n    /**\n     * @dev Check if spending is allowed from bucket\n     */\n    function canSpendFromBucket(\n        address user, \n        string memory bucketName, \n        uint256 amount\n    ) external view returns (bool canSpend, string memory reason) {\n        if (!userBuckets[user][bucketName].exists) {\n            return (false, \"Bucket does not exist\");\n        }\n        \n        if (!userBuckets[user][bucketName].active) {\n            return (false, \"Bucket is inactive\");\n        }\n        \n        Bucket storage bucket = userBuckets[user][bucketName];\n        \n        // Check balance\n        if (bucket.balance < amount) {\n            return (false, \"Insufficient bucket balance\");\n        }\n        \n        // Check monthly limit\n        if (bucket.monthlyLimit > 0) {\n            uint256 currentMonthlySpent = bucket.monthlySpent;\n            \n            // Reset if needed\n            if (block.timestamp >= bucket.lastResetTimestamp + MONTH_SECONDS) {\n                currentMonthlySpent = 0;\n            }\n            \n            if (currentMonthlySpent + amount > bucket.monthlyLimit) {\n                return (false, \"Would exceed monthly limit\");\n            }\n        }\n        \n        return (true, \"\");\n    }\n    \n    // ============ RECEIVE FUNCTION ============\n    \n    /**\n     * @dev Receive ETH deposits\n     */\n    receive() external payable {\n        userTokenBalances[msg.sender][ETH_ADDRESS].unallocated = \n            userTokenBalances[msg.sender][ETH_ADDRESS].unallocated + msg.value;\n        emit FundsDeposited(msg.sender, msg.value, ETH_ADDRESS);\n    }\n}"},"lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
