// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BucketCreated extends ethereum.Event {
  get params(): BucketCreated__Params {
    return new BucketCreated__Params(this);
  }
}

export class BucketCreated__Params {
  _event: BucketCreated;

  constructor(event: BucketCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[1].value.toString();
  }

  get monthlyLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BucketFunded extends ethereum.Event {
  get params(): BucketFunded__Params {
    return new BucketFunded__Params(this);
  }
}

export class BucketFunded__Params {
  _event: BucketFunded;

  constructor(event: BucketFunded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[1].value.toString();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class BucketTransfer extends ethereum.Event {
  get params(): BucketTransfer__Params {
    return new BucketTransfer__Params(this);
  }
}

export class BucketTransfer__Params {
  _event: BucketTransfer;

  constructor(event: BucketTransfer) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromBucket(): string {
    return this._event.parameters[1].value.toString();
  }

  get toBucket(): string {
    return this._event.parameters[2].value.toString();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class BucketUpdated extends ethereum.Event {
  get params(): BucketUpdated__Params {
    return new BucketUpdated__Params(this);
  }
}

export class BucketUpdated__Params {
  _event: BucketUpdated;

  constructor(event: BucketUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[1].value.toString();
  }

  get newLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class DelegateAdded extends ethereum.Event {
  get params(): DelegateAdded__Params {
    return new DelegateAdded__Params(this);
  }
}

export class DelegateAdded__Params {
  _event: DelegateAdded;

  constructor(event: DelegateAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class DelegateRemoved extends ethereum.Event {
  get params(): DelegateRemoved__Params {
    return new DelegateRemoved__Params(this);
  }
}

export class DelegateRemoved__Params {
  _event: DelegateRemoved;

  constructor(event: DelegateRemoved) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsDeposited extends ethereum.Event {
  get params(): FundsDeposited__Params {
    return new FundsDeposited__Params(this);
  }
}

export class FundsDeposited__Params {
  _event: FundsDeposited;

  constructor(event: FundsDeposited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MonthlyLimitReset extends ethereum.Event {
  get params(): MonthlyLimitReset__Params {
    return new MonthlyLimitReset__Params(this);
  }
}

export class MonthlyLimitReset__Params {
  _event: MonthlyLimitReset;

  constructor(event: MonthlyLimitReset) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SpentFromBucket extends ethereum.Event {
  get params(): SpentFromBucket__Params {
    return new SpentFromBucket__Params(this);
  }
}

export class SpentFromBucket__Params {
  _event: SpentFromBucket;

  constructor(event: SpentFromBucket) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucketName(): string {
    return this._event.parameters[1].value.toString();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class UnallocatedWithdraw extends ethereum.Event {
  get params(): UnallocatedWithdraw__Params {
    return new UnallocatedWithdraw__Params(this);
  }
}

export class UnallocatedWithdraw__Params {
  _event: UnallocatedWithdraw;

  constructor(event: UnallocatedWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SimpleBudgetWallet__canSpendFromBucketResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getCanSpend(): boolean {
    return this.value0;
  }

  getReason(): string {
    return this.value1;
  }
}

export class SimpleBudgetWallet__getBucketResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getEthBalance(): BigInt {
    return this.value0;
  }

  getMonthlySpent(): BigInt {
    return this.value1;
  }

  getMonthlyLimit(): BigInt {
    return this.value2;
  }

  getTimeUntilReset(): BigInt {
    return this.value3;
  }

  getActive(): boolean {
    return this.value4;
  }
}

export class SimpleBudgetWallet__userBucketsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getBalance(): BigInt {
    return this.value0;
  }

  getMonthlySpent(): BigInt {
    return this.value1;
  }

  getMonthlyLimit(): BigInt {
    return this.value2;
  }

  getLastResetTimestamp(): BigInt {
    return this.value3;
  }

  getExists(): boolean {
    return this.value4;
  }

  getActive(): boolean {
    return this.value5;
  }
}

export class SimpleBudgetWallet extends ethereum.SmartContract {
  static bind(address: Address): SimpleBudgetWallet {
    return new SimpleBudgetWallet("SimpleBudgetWallet", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETH_ADDRESS(): Address {
    let result = super.call("ETH_ADDRESS", "ETH_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_ETH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH_ADDRESS", "ETH_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MONTH_SECONDS(): BigInt {
    let result = super.call("MONTH_SECONDS", "MONTH_SECONDS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MONTH_SECONDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MONTH_SECONDS",
      "MONTH_SECONDS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPENDER_ROLE(): Bytes {
    let result = super.call("SPENDER_ROLE", "SPENDER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SPENDER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SPENDER_ROLE", "SPENDER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canSpendFromBucket(
    user: Address,
    bucketName: string,
    amount: BigInt,
  ): SimpleBudgetWallet__canSpendFromBucketResult {
    let result = super.call(
      "canSpendFromBucket",
      "canSpendFromBucket(address,string,uint256):(bool,string)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromString(bucketName),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return new SimpleBudgetWallet__canSpendFromBucketResult(
      result[0].toBoolean(),
      result[1].toString(),
    );
  }

  try_canSpendFromBucket(
    user: Address,
    bucketName: string,
    amount: BigInt,
  ): ethereum.CallResult<SimpleBudgetWallet__canSpendFromBucketResult> {
    let result = super.tryCall(
      "canSpendFromBucket",
      "canSpendFromBucket(address,string,uint256):(bool,string)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromString(bucketName),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleBudgetWallet__canSpendFromBucketResult(
        value[0].toBoolean(),
        value[1].toString(),
      ),
    );
  }

  getBucket(
    user: Address,
    bucketName: string,
  ): SimpleBudgetWallet__getBucketResult {
    let result = super.call(
      "getBucket",
      "getBucket(address,string):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromString(bucketName)],
    );

    return new SimpleBudgetWallet__getBucketResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
    );
  }

  try_getBucket(
    user: Address,
    bucketName: string,
  ): ethereum.CallResult<SimpleBudgetWallet__getBucketResult> {
    let result = super.tryCall(
      "getBucket",
      "getBucket(address,string):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromString(bucketName)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleBudgetWallet__getBucketResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
      ),
    );
  }

  getBucketBalance(user: Address, token: Address, bucketName: string): BigInt {
    let result = super.call(
      "getBucketBalance",
      "getBucketBalance(address,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromString(bucketName),
      ],
    );

    return result[0].toBigInt();
  }

  try_getBucketBalance(
    user: Address,
    token: Address,
    bucketName: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBucketBalance",
      "getBucketBalance(address,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromString(bucketName),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalBalance(user: Address, token: Address): BigInt {
    let result = super.call(
      "getTotalBalance",
      "getTotalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getTotalBalance(
    user: Address,
    token: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBalance",
      "getTotalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnallocatedBalance(user: Address, token: Address): BigInt {
    let result = super.call(
      "getUnallocatedBalance",
      "getUnallocatedBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getUnallocatedBalance(
    user: Address,
    token: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnallocatedBalance",
      "getUnallocatedBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBuckets(user: Address): Array<string> {
    let result = super.call(
      "getUserBuckets",
      "getUserBuckets(address):(string[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toStringArray();
  }

  try_getUserBuckets(user: Address): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getUserBuckets",
      "getUserBuckets(address):(string[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegate(user: Address, bucketName: string, delegate: Address): boolean {
    let result = super.call(
      "isDelegate",
      "isDelegate(address,string,address):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromString(bucketName),
        ethereum.Value.fromAddress(delegate),
      ],
    );

    return result[0].toBoolean();
  }

  try_isDelegate(
    user: Address,
    bucketName: string,
    delegate: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDelegate",
      "isDelegate(address,string,address):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromString(bucketName),
        ethereum.Value.fromAddress(delegate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userBucketNames(param0: Address, param1: BigInt): string {
    let result = super.call(
      "userBucketNames",
      "userBucketNames(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toString();
  }

  try_userBucketNames(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "userBucketNames",
      "userBucketNames(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userBuckets(
    param0: Address,
    param1: string,
  ): SimpleBudgetWallet__userBucketsResult {
    let result = super.call(
      "userBuckets",
      "userBuckets(address,string):(uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)],
    );

    return new SimpleBudgetWallet__userBucketsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean(),
    );
  }

  try_userBuckets(
    param0: Address,
    param1: string,
  ): ethereum.CallResult<SimpleBudgetWallet__userBucketsResult> {
    let result = super.tryCall(
      "userBuckets",
      "userBuckets(address,string):(uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleBudgetWallet__userBucketsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean(),
      ),
    );
  }

  userTokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_userTokenBalances(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDelegateCall extends ethereum.Call {
  get inputs(): AddDelegateCall__Inputs {
    return new AddDelegateCall__Inputs(this);
  }

  get outputs(): AddDelegateCall__Outputs {
    return new AddDelegateCall__Outputs(this);
  }
}

export class AddDelegateCall__Inputs {
  _call: AddDelegateCall;

  constructor(call: AddDelegateCall) {
    this._call = call;
  }

  get bucketName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddDelegateCall__Outputs {
  _call: AddDelegateCall;

  constructor(call: AddDelegateCall) {
    this._call = call;
  }
}

export class BatchSpendCall extends ethereum.Call {
  get inputs(): BatchSpendCall__Inputs {
    return new BatchSpendCall__Inputs(this);
  }

  get outputs(): BatchSpendCall__Outputs {
    return new BatchSpendCall__Outputs(this);
  }
}

export class BatchSpendCall__Inputs {
  _call: BatchSpendCall;

  constructor(call: BatchSpendCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bucketNames(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get datas(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class BatchSpendCall__Outputs {
  _call: BatchSpendCall;

  constructor(call: BatchSpendCall) {
    this._call = call;
  }
}

export class CreateBucketCall extends ethereum.Call {
  get inputs(): CreateBucketCall__Inputs {
    return new CreateBucketCall__Inputs(this);
  }

  get outputs(): CreateBucketCall__Outputs {
    return new CreateBucketCall__Outputs(this);
  }
}

export class CreateBucketCall__Inputs {
  _call: CreateBucketCall;

  constructor(call: CreateBucketCall) {
    this._call = call;
  }

  get bucketName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get monthlyLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateBucketCall__Outputs {
  _call: CreateBucketCall;

  constructor(call: CreateBucketCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class FundBucketCall extends ethereum.Call {
  get inputs(): FundBucketCall__Inputs {
    return new FundBucketCall__Inputs(this);
  }

  get outputs(): FundBucketCall__Outputs {
    return new FundBucketCall__Outputs(this);
  }
}

export class FundBucketCall__Inputs {
  _call: FundBucketCall;

  constructor(call: FundBucketCall) {
    this._call = call;
  }

  get bucketName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class FundBucketCall__Outputs {
  _call: FundBucketCall;

  constructor(call: FundBucketCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveDelegateCall extends ethereum.Call {
  get inputs(): RemoveDelegateCall__Inputs {
    return new RemoveDelegateCall__Inputs(this);
  }

  get outputs(): RemoveDelegateCall__Outputs {
    return new RemoveDelegateCall__Outputs(this);
  }
}

export class RemoveDelegateCall__Inputs {
  _call: RemoveDelegateCall;

  constructor(call: RemoveDelegateCall) {
    this._call = call;
  }

  get bucketName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveDelegateCall__Outputs {
  _call: RemoveDelegateCall;

  constructor(call: RemoveDelegateCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SpendFromBucketCall extends ethereum.Call {
  get inputs(): SpendFromBucketCall__Inputs {
    return new SpendFromBucketCall__Inputs(this);
  }

  get outputs(): SpendFromBucketCall__Outputs {
    return new SpendFromBucketCall__Outputs(this);
  }
}

export class SpendFromBucketCall__Inputs {
  _call: SpendFromBucketCall;

  constructor(call: SpendFromBucketCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bucketName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SpendFromBucketCall__Outputs {
  _call: SpendFromBucketCall;

  constructor(call: SpendFromBucketCall) {
    this._call = call;
  }
}

export class TransferBetweenBucketsCall extends ethereum.Call {
  get inputs(): TransferBetweenBucketsCall__Inputs {
    return new TransferBetweenBucketsCall__Inputs(this);
  }

  get outputs(): TransferBetweenBucketsCall__Outputs {
    return new TransferBetweenBucketsCall__Outputs(this);
  }
}

export class TransferBetweenBucketsCall__Inputs {
  _call: TransferBetweenBucketsCall;

  constructor(call: TransferBetweenBucketsCall) {
    this._call = call;
  }

  get fromBucket(): string {
    return this._call.inputValues[0].value.toString();
  }

  get toBucket(): string {
    return this._call.inputValues[1].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class TransferBetweenBucketsCall__Outputs {
  _call: TransferBetweenBucketsCall;

  constructor(call: TransferBetweenBucketsCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateBucketCall extends ethereum.Call {
  get inputs(): UpdateBucketCall__Inputs {
    return new UpdateBucketCall__Inputs(this);
  }

  get outputs(): UpdateBucketCall__Outputs {
    return new UpdateBucketCall__Outputs(this);
  }
}

export class UpdateBucketCall__Inputs {
  _call: UpdateBucketCall;

  constructor(call: UpdateBucketCall) {
    this._call = call;
  }

  get bucketName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get newMonthlyLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get active(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateBucketCall__Outputs {
  _call: UpdateBucketCall;

  constructor(call: UpdateBucketCall) {
    this._call = call;
  }
}

export class WithdrawUnallocatedCall extends ethereum.Call {
  get inputs(): WithdrawUnallocatedCall__Inputs {
    return new WithdrawUnallocatedCall__Inputs(this);
  }

  get outputs(): WithdrawUnallocatedCall__Outputs {
    return new WithdrawUnallocatedCall__Outputs(this);
  }
}

export class WithdrawUnallocatedCall__Inputs {
  _call: WithdrawUnallocatedCall;

  constructor(call: WithdrawUnallocatedCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawUnallocatedCall__Outputs {
  _call: WithdrawUnallocatedCall;

  constructor(call: WithdrawUnallocatedCall) {
    this._call = call;
  }
}
