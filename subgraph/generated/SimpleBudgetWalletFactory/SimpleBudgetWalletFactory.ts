// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WalletCreated extends ethereum.Event {
  get params(): WalletCreated__Params {
    return new WalletCreated__Params(this);
  }
}

export class WalletCreated__Params {
  _event: WalletCreated;

  constructor(event: WalletCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get salt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WalletRegistered extends ethereum.Event {
  get params(): WalletRegistered__Params {
    return new WalletRegistered__Params(this);
  }
}

export class WalletRegistered__Params {
  _event: WalletRegistered;

  constructor(event: WalletRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SimpleBudgetWalletFactory__getStatsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalWallets(): BigInt {
    return this.value0;
  }

  getContractBalance(): BigInt {
    return this.value1;
  }
}

export class SimpleBudgetWalletFactory__getWalletsResult {
  value0: Array<Address>;
  value1: BigInt;

  constructor(value0: Array<Address>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWallets(): Array<Address> {
    return this.value0;
  }

  getTotal(): BigInt {
    return this.value1;
  }
}

export class SimpleBudgetWalletFactory extends ethereum.SmartContract {
  static bind(address: Address): SimpleBudgetWalletFactory {
    return new SimpleBudgetWalletFactory("SimpleBudgetWalletFactory", address);
  }

  ENTRY_POINT(): Address {
    let result = super.call("ENTRY_POINT", "ENTRY_POINT():(address)", []);

    return result[0].toAddress();
  }

  try_ENTRY_POINT(): ethereum.CallResult<Address> {
    let result = super.tryCall("ENTRY_POINT", "ENTRY_POINT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allWallets(param0: BigInt): Address {
    let result = super.call("allWallets", "allWallets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allWallets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allWallets", "allWallets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWallet(): Address {
    let result = super.call("createWallet", "createWallet():(address)", []);

    return result[0].toAddress();
  }

  try_createWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("createWallet", "createWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWallet1(user: Address): Address {
    let result = super.call("createWallet", "createWallet(address):(address)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toAddress();
  }

  try_createWallet1(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createWallet",
      "createWallet(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWalletDeterministic(salt: BigInt): Address {
    let result = super.call(
      "createWalletDeterministic",
      "createWalletDeterministic(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(salt)],
    );

    return result[0].toAddress();
  }

  try_createWalletDeterministic(salt: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createWalletDeterministic",
      "createWalletDeterministic(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(salt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWalletDeterministic1(user: Address, salt: BigInt): Address {
    let result = super.call(
      "createWalletDeterministic",
      "createWalletDeterministic(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(salt),
      ],
    );

    return result[0].toAddress();
  }

  try_createWalletDeterministic1(
    user: Address,
    salt: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createWalletDeterministic",
      "createWalletDeterministic(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(salt),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwner(wallet: Address): Address {
    let result = super.call("getOwner", "getOwner(address):(address)", [
      ethereum.Value.fromAddress(wallet),
    ]);

    return result[0].toAddress();
  }

  try_getOwner(wallet: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner(address):(address)", [
      ethereum.Value.fromAddress(wallet),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStats(): SimpleBudgetWalletFactory__getStatsResult {
    let result = super.call("getStats", "getStats():(uint256,uint256)", []);

    return new SimpleBudgetWalletFactory__getStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getStats(): ethereum.CallResult<SimpleBudgetWalletFactory__getStatsResult> {
    let result = super.tryCall("getStats", "getStats():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleBudgetWalletFactory__getStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getUserWallet(user: Address): Address {
    let result = super.call(
      "getUserWallet",
      "getUserWallet(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toAddress();
  }

  try_getUserWallet(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUserWallet",
      "getUserWallet(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWallet(user: Address): Address {
    let result = super.call("getWallet", "getWallet(address):(address)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toAddress();
  }

  try_getWallet(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getWallet", "getWallet(address):(address)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWalletAddress(salt: BigInt): Address {
    let result = super.call(
      "getWalletAddress",
      "getWalletAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(salt)],
    );

    return result[0].toAddress();
  }

  try_getWalletAddress(salt: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletAddress",
      "getWalletAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(salt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWallets(
    offset: BigInt,
    limit: BigInt,
  ): SimpleBudgetWalletFactory__getWalletsResult {
    let result = super.call(
      "getWallets",
      "getWallets(uint256,uint256):(address[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );

    return new SimpleBudgetWalletFactory__getWalletsResult(
      result[0].toAddressArray(),
      result[1].toBigInt(),
    );
  }

  try_getWallets(
    offset: BigInt,
    limit: BigInt,
  ): ethereum.CallResult<SimpleBudgetWalletFactory__getWalletsResult> {
    let result = super.tryCall(
      "getWallets",
      "getWallets(uint256,uint256):(address[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleBudgetWalletFactory__getWalletsResult(
        value[0].toAddressArray(),
        value[1].toBigInt(),
      ),
    );
  }

  hasWallet(user: Address): boolean {
    let result = super.call("hasWallet", "hasWallet(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_hasWallet(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasWallet", "hasWallet(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalWalletsCreated(): BigInt {
    let result = super.call(
      "totalWalletsCreated",
      "totalWalletsCreated():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalWalletsCreated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWalletsCreated",
      "totalWalletsCreated():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userWallets(param0: Address): Address {
    let result = super.call("userWallets", "userWallets(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_userWallets(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userWallets",
      "userWallets(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  walletOwners(param0: Address): Address {
    let result = super.call("walletOwners", "walletOwners(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_walletOwners(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "walletOwners",
      "walletOwners(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateWalletCall extends ethereum.Call {
  get inputs(): CreateWalletCall__Inputs {
    return new CreateWalletCall__Inputs(this);
  }

  get outputs(): CreateWalletCall__Outputs {
    return new CreateWalletCall__Outputs(this);
  }
}

export class CreateWalletCall__Inputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }
}

export class CreateWalletCall__Outputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateWallet1Call extends ethereum.Call {
  get inputs(): CreateWallet1Call__Inputs {
    return new CreateWallet1Call__Inputs(this);
  }

  get outputs(): CreateWallet1Call__Outputs {
    return new CreateWallet1Call__Outputs(this);
  }
}

export class CreateWallet1Call__Inputs {
  _call: CreateWallet1Call;

  constructor(call: CreateWallet1Call) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateWallet1Call__Outputs {
  _call: CreateWallet1Call;

  constructor(call: CreateWallet1Call) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateWalletDeterministicCall extends ethereum.Call {
  get inputs(): CreateWalletDeterministicCall__Inputs {
    return new CreateWalletDeterministicCall__Inputs(this);
  }

  get outputs(): CreateWalletDeterministicCall__Outputs {
    return new CreateWalletDeterministicCall__Outputs(this);
  }
}

export class CreateWalletDeterministicCall__Inputs {
  _call: CreateWalletDeterministicCall;

  constructor(call: CreateWalletDeterministicCall) {
    this._call = call;
  }

  get salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateWalletDeterministicCall__Outputs {
  _call: CreateWalletDeterministicCall;

  constructor(call: CreateWalletDeterministicCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateWalletDeterministic1Call extends ethereum.Call {
  get inputs(): CreateWalletDeterministic1Call__Inputs {
    return new CreateWalletDeterministic1Call__Inputs(this);
  }

  get outputs(): CreateWalletDeterministic1Call__Outputs {
    return new CreateWalletDeterministic1Call__Outputs(this);
  }
}

export class CreateWalletDeterministic1Call__Inputs {
  _call: CreateWalletDeterministic1Call;

  constructor(call: CreateWalletDeterministic1Call) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get salt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateWalletDeterministic1Call__Outputs {
  _call: CreateWalletDeterministic1Call;

  constructor(call: CreateWalletDeterministic1Call) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RegisterWalletCall extends ethereum.Call {
  get inputs(): RegisterWalletCall__Inputs {
    return new RegisterWalletCall__Inputs(this);
  }

  get outputs(): RegisterWalletCall__Outputs {
    return new RegisterWalletCall__Outputs(this);
  }
}

export class RegisterWalletCall__Inputs {
  _call: RegisterWalletCall;

  constructor(call: RegisterWalletCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterWalletCall__Outputs {
  _call: RegisterWalletCall;

  constructor(call: RegisterWalletCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
